
import { GoogleGenAI } from "@google/genai";

/**
 * Generates an ad creative image using Gemini's imagen-4.0 model.
 * @param prompt - The text prompt describing the desired image.
 * @param aspectRatio - The aspect ratio for the generated image.
 * @returns A promise that resolves to a base64 encoded data URL (e.g., "data:image/jpeg;base64,...").
 */
export const generateAdCreative = async (prompt: string, aspectRatio: '16:9' | '9:16' | '1:1' | '4:3' | '3:4' = '16:9'): Promise<string> => {
  // Lazily initialize the AI client to prevent the app from crashing on load
  // if the API key is not configured. The SDK will throw an error if the key
  // is missing, which is caught by the calling UI component.
  const ai = new GoogleGenAI({ apiKey: process.env.API_KEY });

  try {
    const response = await ai.models.generateImages({
      model: 'imagen-4.0-generate-001',
      prompt: prompt,
      config: {
        numberOfImages: 1,
        outputMimeType: 'image/jpeg',
        aspectRatio: aspectRatio,
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      const base64ImageBytes: string = response.generatedImages[0].image.imageBytes;
      return `data:image/jpeg;base64,${base64ImageBytes}`;
    } else {
      throw new Error("No image was generated by the API.");
    }
  } catch (error) {
    console.error("Error generating ad creative:", error);
    // Re-throw the error to be handled by the calling component
    throw new Error("Failed to communicate with the image generation service.");
  }
};
